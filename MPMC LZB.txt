8-BIT HEXADECIMAL
ADDITION - 2
SUBTRACTION - 2
MULTIPLICATION - 4
DIVISION - 2+2

16-BIT HEXADECIMAL
ADDITION - 4
SUBTRACTION - 4
MULTIPLICATION - 8
DIVISION - 4+4

8-BIT DECIMAL
ADDITION - 2
SUBTRACTION - 2
MULTIPLICATION - 2
DIVISION - 2+2

TRAINER KIT:

MATRIX ADDITION:

MOV CL,09
MOV SI,1200H
MOV DI,1300H

LOOP:
MOV AL,[SI]
MOV BL,[DI]
ADD AL,BL
MOV [DI],AL
INC DI
INC SI
DEC CL
JNZ LOOP
HLT

LARGEST/SMALLEST NUMBER:

MOV SI,1200H
MOV CL,[SI]
INC SI
MOV AL,[SI]
DEC CL

LOOP:
INC SI
CMP AL,[SI]
JNB LOOP1
MOV AL,[SI]

LOOP1:
DEC CL
JNZ LOOP
MOV DI,1300H
MOV [DI],AL
HLT

SORTING:

MOV SI,1300H
MOV CL,[SI]

LOOP:
MOV SI,1300H
MOV DL,[SI]
INC SI
MOV AL,[SI]
DEC DL
JZ LOOP4

LOOP1:
INC SI
MOV BL,[SI]
CMP AL,BL
JNB LOOP2
DEC SI
MOV [SI],AL
MOV AL,BL
JMP LOOP3

LOOP2:
DEC SI
MOV [SI],BL

LOOP3:
INC SI
DEC DL
JNZ LOOP1

LOOP4:
MOV [SI],AL
DEC CL
JNZ LOOP
HLT

DECI TO HEXADECI:

MOV SI, 9000H
MOV AL, [SI]
MOV BH, 01H
AND AL, 0FH
MUL BH
MOV DX, AX
MOV AL, [SI]
AND AL, 0F0H
MOV CL, 04H
SHR AL, CL
MOV BH, 0AH
MUL BH
ADD AX, DX
INC SI
MOV [SI], AX
HLT

HEXADECI TO DECI:

MOV SI, 9000H
MOV BL, 0AH
MOV AH, 00H
MOV AL, [SI]

TOP: 
CMP AL, BL
JC STORE
DIV BL
INC SI
MOV [SI], AH
JMP TOP

STORE: 
INC SI
MOV [SI], AL
HLT

STEPPER MOTOR:

MOV DX, FF26H
MOV AL, 80H
OUT DX, AL
MOV DX, FF20H
MOV AL, 88H 

BACK:
OUT DX, AL
CALL DELAY
ROR / ROL AL, 01H
JMP BACK

DELAY: 
MOV CX, 4000H

REPEAT: 
LOOP REPEAT
RET

SQUARE WAVEFORM:

MOV AL, 80H
MOV DX, FF26H
OUT DX, AL

REPEAT:
MOV AL, 00H
MOV DX, FF20H
OUT DX, AL
CALL DELAY
MOV AL, FFH
MOV DX, FF20H
OUT DX, AL
CALL DELAY
JMP REPEAT

DELAY:
MOV CX, FF00H

TOP:
DEC CX
JNZ TOP
RET

TRIANGULAR WAVEFORM:

MOV AL, 80H
MOV DX, FF26H
OUT DX, AL

REPEAT:
MOV AL, 00H
MOV DX, FF20H

AGAIN1:
OUT DX, AL
INC AL
CMP AL, FFH
JB AGAIN1

AGAIN2:
OUT DX, AL
DEC AL
CMP AL, 00H
JNZ AGAIN2
JMP REPEAT

SAWTOOTH WAVEFORM:

MOV AL, 80H
MOV DX, FF26H
OUT DX, AL

REPEAT:
MOV AL, 00H

INCREMENT:
MOV DX, FF20H
OUT DX, AL
INC AL
CMP AL, FFH
JB INCREMENT
JMP REPEAT

TRAFFIC LIGHT CONTROLLER:

MOV AL, 80H
MOV DX, 0FF26H
OUT DX, AL

REPEATAGAIN:
MOV SI, 8038H

NEXTSTATE:
MOV DX, 0FF20H
MOV AL, [SI]
OUT DX, AL
INC SI
MOV DX, 0FF22H
MOV AL, [SI]
OUT DX, AL
INC SI
MOV DX, 0FF24H
MOV AL, [SI]
OUT DX, AL
INC SI
CALL DELAY
CMP SI, 8055H
JNZ NEXTSTATE
JMP REPEATAGAIN

DELAY:
MOV CX, 00FFH

TOP1:
PUSH CX
MOV CX, 03FFH

TOP2:
NOP
LOOP TOP2
POP CX
LOOP TOP1
RET
DB 10H, 81H, 7AH
DB 44H, 44H, F0H
DB 08H, 11H, E5H
DB 44H, 44H, F0H
DB 81H, 10H, 0DH
DB 44H, 44H, F0H
DB 11H, 08H, B5H
DB 44H, 44H, F0H
DB 88H, 88H, 00H
DB 44H, 44H, F0H
DB 00H

MASM:

cr equ 0dh
lf equ 0ah

data segment
table db '0123456789'
n1 db 009h
n2 db 009h
msg1 db 'the result is'
asciir db 2 dup(?)
db cr,lf,'$'
data ends

code segment
asume cs:code, ds:data

start:
mov ax,data
mov ds,ax
mov al,n1
mul n2
aam
lea bx,table
mov result,al
lea si,asciir
add si,1
mov al,result
and al,0fh
xlat
mov [si],al
dec si
mov al,result
and al,0f0h
mov cl,04h
shr al,cl
xlat
mov [si],al
mov ah,09h
lea dx,msg
int 21h

quit:
mov al,00h
mov ah,04ch
int 21h

code ends
end start

HEXA TO DECI MASM:

CR EQU 0DH
LF EQU 0AH

DATA SEGMENT
TABLE DB '0123456789'
HEXADECIMAL DW 000FFH
MESSAGE DB 'THE DECIMAL NUMBER IS:'
DECIMAL DB 4 dup(' ')
     DB CR, LF, '$'
DATA ENDS

CODE SEGMENT
Assume CS:Code, DS: Data

START:
MOV AX, DATA
MOV DS, AX
MOV AX, HEXADECIMAL
MOV CX, 0000AH
LEA BX, TABLE
LEA SI, DECIMAL
ADD SI, 3

TOP:
CMP AX, CX
JB BOTTOM
XOR DX,DX
DIV CX
MOV AL,DL
XLAT
MOV [SI], AL
DEC SI
JMP TOP

BOTTOM:
XLAT
MOV [SI], AL

MOV AH,09H
LEA DX,MESSAGE
INT 21H

QUIT:
MOV AL,0
MOV AH,04CH
INT 21H

CODE ENDS
END START

DECI TO HEXADECI MASM:

CR EQU 0DH
LF EQU 0AH

DATA SEGMENT
TABLE DB '0123456789ABCDEF'
DECILENGTH DB 4
DECIMAL DB '0255'
HEXADECIMAL DW 0
MULTFACTOR DW 1
MESSAGE DB 'THE HEXADECIMAL NUMBER IS:'
HEXASCII DB 4 dup(' ')
     DB CR, LF, '$'
DATA ENDS

CODE SEGMENT
Assume CS:Code, DS: Data

START:
MOV AX, DATA
MOV DS, AX
MOV CX, DECILENGTH
LEA SI, DECIMAL
ADD SI, 3

TOP:
MOV AL, [SI]
AND AX, 0000FH
MUL MULTFACTOR
ADD HEXADECIMAL, AX
MOV AX, MULTFACTOR
MOV BX, 0000AH
MUL BX
MOV MULTFACTOR, AX
DEC SI
LOOP TOP

LEA SI, HEXASCII
ADD SI, 3
LEA BX, TABLE
MOV AX, HEXADECIMAL
AND AX, 0000FH
XLAT
MOV [SI], AL
DEC SI
MOV AX, HEXADECIMAL
AND AX, 000F0H
MOV CL, 04H
SHR AL, CL
XLAT
MOV [SI], AL
DEC SI
MOV AX, HEXADECIMAL
AND AX, 00F00H
MOV CL, 08H
SHR AX, CL
XLAT
MOV [SI], AL
DEC SI
MOV AX, HEXADECIMAL
AND AX, 0F000H
MOV CL, 00CH
SHR AX, CL
XLAT
MOV [SI], AL
DEC SI

MOV AH, 09H
LEA DX, MESSAGE
INT 21H

QUIT:
MOV AL, 0
MOV AH, 04CH
INT 21

CODE ENDS
END START

LOWERCASE TO UPPERCASE MASM:

CR EQU 0DH
LF EQU 0AH

STACK SEGMENT
    DW 100 DUP(?)
STACK ENDS

DATA SEGMENT
    STRING DB 'india'
    DB CR, LF, '$'
    STRLEN DW 05H
    MESSAGE1 DB ' THE ORIGINAL STRING:', CR, LF, '$'
    MESSAGE2 DB ' THE TRANSLATED STRING:', '$'
    TABLE DB 48 DUP(' '), '0123456789', 9 DUP(' ')
    DB 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 6 DUP(' ')
    DB 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 133 DUP(' ')
DATA ENDS

CODE SEGMENT
    ASSUME CS:CODE, DS:DATA

START:
    MOV AX, DATA
    MOV DS, AX
    MOV ES, AX

    LEA SI, STRING
    LEA DI, STRING
    LEA BX, TABLE

    MOV CX, STRLEN

    MOV AH, 09H
    LEA DX, MESSAGE1
    INT 21H

    MOV AH, 09H
    LEA DX, STRING
    INT 21H

    CLD

TOP:
    LODSB
    XLAT
    STOSB
    LOOP TOP

    MOV AH, 09H
    LEA DX, MESSAGE2
    INT 21H

    MOV AH, 09H
    LEA DX, STRING
    INT 21H

QUIT:
    MOV AL, 0
    MOV AH, 04CH
    INT 21H

CODE ENDS
END START

PALINDROME:

CR EQU 0DH 
LF EQU 0AH 

DATA SEGMENT 
    STRING1 DB 'LIRIL' 
    STRLENGTH EQU $-STRING1 
    MESSAGE1 DB 'THE GIVEN WORD IS PALINDROME', CR, LF, '$' 
    MESSAGE2 DB 'THE GIVEN WORD IS NOT PALINDROME', CR, LF, '$' 
    STRING2 DB 5 DUP(' '), CR, LF, '$' 
DATA ENDS 
 
CODE SEGMENT 
    Assume CS:Code, DS: Data

START: 
    MOV AX, DATA 
    MOV DS, AX 
    MOV ES, AX 

    LEA SI, STRING1 
    LEA DI, STRING2+STRLENGTH-1 
    MOV CX, STRLENGTH 

TOP: 
    CLD 
    LODSB 
    STD 
    STOSB 
    LOOP TOP 

    LEA SI, STRING1 
    LEA DI, STRING2 
    CLD 
    MOV CX, STRLENGTH 
    REPE CMPSB 
    CMP CX, 00H 
    JNZ NOTPALINDROME 

    MOV AH, 09H 
    LEA DX, MESSAGE1 
    INT 21H 
    JMP QUIT 

NOTPALINDROME: 
    MOV AH, 09H 
    LEA DX, MESSAGE2 
    INT 21H 

QUIT: 
    MOV AL, 0 
    MOV AH, 04CH 
    INT 21H 

CODE ENDS 
END START